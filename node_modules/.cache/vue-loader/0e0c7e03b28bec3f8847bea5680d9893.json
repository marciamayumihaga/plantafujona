{"remainingRequest":"/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/src/components/CadastroCenario.vue?vue&type=template&id=2b0a6c2c&scoped=true&","dependencies":[{"path":"/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/src/components/CadastroCenario.vue","mtime":1595546651000},{"path":"/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andreruz/Desktop/Marcia/Escapista/EscapeVirtual/cadastrosala/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}